#include <iostream>
#include <iomanip>
#include <cmath>

using namespace std;

double f(double x) {
    return 2*log(x) - 0.5*x + 1;
}

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ—Ç–æ–¥–∞ –ù—å—é—Ç–æ–Ω–∞
double df(double x) {
    return (2 / x - 0.5);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
double phi(double x) {
    return x - 0.5 * (2 * log(x) - 0.5 * x + 1);
}

// –ú–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
void bisection(double a, double b, double precision) {
    cout << "–ú–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è:\n";
    cout << "N\tan\t\t\tbn\t\t\tbn - an\n";
    cout << "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n";

    int n = 0;
    double c;
    while (fabs(b - a) > precision) {
        n++;
        c = (a + b) / 2;
        cout << n << "\t" << fixed << setprecision(6) << a << "\t" << b << "\t" << fabs(b - a) << endl;

        if (f(c) == 0.0) {
            break;
        } else if (f(a) * f(c) < 0) {
            b = c;
        } else {
            a = c;
        }
    }

    cout << "–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å: " << ((a + b) / 2) << endl;
    cout << "–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ: " << f(((a + b) / 2)) << endl;
    cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: " << n << "\n\n";
}

// –ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞
void newton(double x0, double precision) {
    cout << "–ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞:\n";
    cout << "N\tXn\t\t\tXn+1\t\tXn+1 - Xn\n";
    cout << "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n";

    int n = 0;
    double x = x0;
    double x_prev;
    double delta;

    do {
        n++;
        x_prev = x;
        x = x_prev - f(x_prev) / df(x_prev);
        delta = fabs(x - x_prev);
        cout << n << "\t" << fixed << setprecision(6) << x_prev << "\t" << x << "\t" << delta << endl;
    } while (fabs(f(x)) > precision);

    cout << "–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å: " << x << endl;
    cout << "–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ: " << f(x) << endl;
    cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: " << n << "\n\n";
}

// –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
void simple_iteration(double x0, double precision) {
    cout << "–ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π:\n";
    cout << "N\tXn\t\t\tXn+1\t\tXn+1 - Xn\n";
    cout << "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n";

    int n = 0;
    double x = x0;
    double x_prev;
    double delta;

    do {
        n++;
        x_prev = x;
        x = phi(x_prev);
        delta = fabs(x - x_prev);
        cout << n << "\t" << fixed << setprecision(6) << x_prev << "\t" << x << "\t" << delta << endl;
    } while (fabs(f(x)) > precision);

    cout << "–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å: " << x << endl;
    cout << "–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ: " << f(x) << endl;
    cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: " << n << "\n";
}

int main() {
    double precision = 0.0001; // —Ç—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    double a = 0.0, b = 1.0;  // –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –ù—å—é—Ç–æ–Ω–∞ –∏ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π (—Å–µ—Ä–µ–¥–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
    double x0 = (a+b)/2;

    cout << "–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è 2ùëôùëõùë• ‚àí 0.5ùë• + 1 = 0 —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é " << precision << endl;
    bisection(a, b, precision);
    newton(x0, precision);
    simple_iteration(x0, precision);

    return 0;
}